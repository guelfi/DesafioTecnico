name: Deploy to OCI VM

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite execu√ß√£o manual

jobs:
  deploy:
    name: Deploy MobileMed to OCI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.OCI_SSH_PRIVATE_KEY }}

      - name: Add OCI VM to known hosts
        run: ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts

      - name: Create project directory on OCI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.OCI_HOST }} "
            sudo mkdir -p /var/www/DesafioTecnico
            sudo chown ubuntu:ubuntu /var/www/DesafioTecnico
          "

      - name: Sync project files to OCI
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='bin' \
            --exclude='obj' \
            --exclude='.env.local*' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ubuntu@${{ secrets.OCI_HOST }}:/var/www/DesafioTecnico/

      - name: Deploy and build on OCI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.OCI_HOST }} "
            cd /var/www/DesafioTecnico
            
            echo 'üöÄ Iniciando deploy do MobileMed...'
            
            # Parar containers existentes
            docker-compose down || true
            
            # Build e start dos containers
            echo 'üî® Fazendo build dos containers...'
            docker-compose up --build -d
            
            # Aguardar containers iniciarem
            echo '‚è≥ Aguardando containers iniciarem...'
            sleep 10
            
            # Verificar status dos containers
            echo 'üìä Status dos containers:'
            docker-compose ps
            
            # Limpeza de imagens n√£o utilizadas
            echo 'üßπ Limpando imagens n√£o utilizadas...'
            docker image prune -f
            
            echo '‚úÖ Deploy conclu√≠do com sucesso!'
            echo 'üåê MobileMed dispon√≠vel em:'
            echo '   - API: http://129.148.62.47:5000'
            echo '   - Frontend: http://129.148.62.47:5005'
          "
