name: Deploy to OCI VM

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite execução manual

jobs:
  deploy:
    name: Deploy HealthCore to OCI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.OCI_SSH_PRIVATE_KEY }}

      - name: Add OCI VM to known hosts
        run: ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts

      - name: Create project directory on OCI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.OCI_HOST }} "
            sudo mkdir -p /var/www/DesafioTecnico
            sudo chown ubuntu:ubuntu /var/www/DesafioTecnico
          "

      - name: Sync project files to OCI
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='bin' \
            --exclude='obj' \
            --exclude='.env.local*' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ubuntu@${{ secrets.OCI_HOST }}:/var/www/DesafioTecnico/

      - name: Deploy and build on OCI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.OCI_HOST }} << 'EOF'
            set -e

            if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
              echo '🔧 Docker ou Docker Compose não funciona. Realizando instalação limpa...'
              # Remove qualquer configuração de repositório Docker conflitante
              sudo rm -f /etc/apt/sources.list.d/docker.list
              # Instala as dependências para adicionar um novo repositório
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl
              # Adiciona a chave GPG oficial do Docker
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              # Adiciona o repositório oficial do Docker
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              # Atualiza a base de dados de pacotes e instala
              sudo apt-get update
              echo '📦 Instalando pacotes essenciais do Docker...'
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker ubuntu
            fi

            cd /var/www/DesafioTecnico
            
            echo '🚀 Iniciando deploy do HealthCore...'
            
            echo '🧹 Limpeza completa de containers e portas...'
            
            # Liberar portas ocupadas por processos externos
            echo 'Liberando portas 5000 e 5005...'
            sudo pkill -f 'dotnet.*5000' || true
            sudo pkill -f 'aspnetcore.*5000' || true
            sudo pkill -f ':5000' || true
            sudo pkill -f ':5005' || true
            
            # Aguardar liberação das portas
            sleep 3
            
            # Parar e remover containers específicos
            sudo docker stop healthcore-api healthcore-frontend 2>/dev/null || true
            sudo docker rm healthcore-api healthcore-frontend 2>/dev/null || true
            
            # Limpeza completa com Docker Compose
            sudo docker compose down --remove-orphans --volumes || true
            
            # Remover containers órfãos
            sudo docker container prune -f || true
            sudo docker network prune -f || true
            
            # Verificar se as portas estão livres
            echo 'Verificando se as portas estão livres...'
            if sudo netstat -tulpn | grep -E '(:5000|:5005)' >/dev/null 2>&1;
            then
              echo 'AVISO: Ainda existem processos usando as portas. Forçando limpeza...'
              sudo fuser -k 5000/tcp 2>/dev/null || true
              sudo fuser -k 5005/tcp 2>/dev/null || true
              sleep 3
            fi
            
            # Aguardar liberação de recursos
            sleep 5
            
            echo '🔨 Fazendo build dos containers com cache otimizado...'
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1
            export DOCKER_CLIENT_TIMEOUT=1200
            export COMPOSE_HTTP_TIMEOUT=1200
            
            # Build com timeout e retry para frontend
            echo '📦 Building API container...'
            sudo -E timeout 600 docker compose build healthcore-api || {
              echo '❌ Falha no build da API'
              exit 1
            }
            
            echo '🎨 Building Frontend container with extended timeout...'
            sudo -E timeout 1200 docker compose build healthcore-frontend || {
              echo '⚠️ Primeiro build do frontend falhou, tentando novamente com limpeza...'
              sudo docker builder prune -f
              sudo -E timeout 1800 docker compose build --no-cache healthcore-frontend || {
                echo '❌ Build do frontend falhou após retry'
                echo '📋 Verificando logs de build...'
                sudo docker compose logs healthcore-frontend || true
                exit 1
              }
            }
            
            echo '🚀 Iniciando containers...'
            sudo docker compose up -d --remove-orphans
            
            echo '⏳ Aguardando inicialização completa...'
            sleep 30
            
            echo '📊 Verificando status dos containers...'
            sudo docker compose ps
            
            echo '🏥 Executando health checks...'
            
            # Verificar API com retry
            for i in {1..10}; do
              if curl -f -s http://localhost:5000/health >/dev/null 2>&1;
              then
                echo '✅ API está respondendo'
                break
              fi
              if [ $i -eq 10 ]; then
                echo '❌ API não responde após 10 tentativas'
                echo '📋 Logs da API:'
                sudo docker compose logs --tail=20 healthcore-api
                exit 1
              fi
              echo "⏳ Aguardando API... (tentativa $i/10)"
              sleep 5
            done
            
            # Verificar Frontend
            for i in {1..5}; do
              if curl -f -s http://localhost:5005 >/dev/null 2>&1;
              then
                echo '✅ Frontend está acessível'
                break
              fi
              if [ $i -eq 5 ]; then
                echo '❌ Frontend não responde após 5 tentativas'
                echo '📋 Logs do Frontend:'
                sudo docker compose logs --tail=20 healthcore-frontend
                exit 1
              fi
              echo "⏳ Aguardando Frontend... (tentativa $i/5)"
              sleep 3
            done
            
            echo '🧹 Limpando imagens Docker não utilizadas...'
            sudo docker image prune -f
            
            echo ''
            echo '🎉 Deploy concluído com sucesso!'
            echo '📊 Status final dos serviços:'
            sudo docker compose ps
            
            echo ''
            echo '🌐 URLs de acesso:'
            PUBLIC_IP=$(curl -s --max-time 3 ifconfig.me 2>/dev/null || echo 'SEU_IP_PUBLICO')
            echo "   Frontend: http://$PUBLIC_IP:5005"
            echo "   API: http://$PUBLIC_IP:5000"
            echo "   Health: http://$PUBLIC_IP:5000/health"
          EOF
