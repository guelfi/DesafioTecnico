name: Deploy to OCI VM

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite execu√ß√£o manual

jobs:
  deploy:
    name: Deploy MobileMed to OCI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.OCI_SSH_PRIVATE_KEY }}

      - name: Add OCI VM to known hosts
        run: ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts

      - name: Create project directory on OCI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.OCI_HOST }} "
            sudo mkdir -p /var/www/DesafioTecnico
            sudo chown ubuntu:ubuntu /var/www/DesafioTecnico
          "

      - name: Sync project files to OCI
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='bin' \
            --exclude='obj' \
            --exclude='.env.local*' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ubuntu@${{ secrets.OCI_HOST }}:/var/www/DesafioTecnico/

      - name: Deploy and build on OCI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.OCI_HOST }} "
            set -e
            cd /var/www/DesafioTecnico
            
            echo 'üöÄ Iniciando deploy do MobileMed...'
            
            echo 'üßπ Parando e removendo containers antigos e √≥rf√£os...'
            docker-compose down --remove-orphans || true
            
            echo 'üîì For√ßando a libera√ß√£o das portas 5000 e 5005...'
            sudo kill -9 $(sudo lsof -t -i:5000) || true
            sudo kill -9 $(sudo lsof -t -i:5005) || true
            sleep 2
            
            echo 'üî® Fazendo build dos containers...'
            docker-compose up --build -d
            
            echo '‚è≥ Aguardando containers iniciarem...'
            sleep 15
            
            echo 'üìä Verificando status dos containers...'
            docker-compose ps

            API_STATUS=$(docker-compose ps -q mobilemed-api | xargs -r docker inspect -f '{{.State.Status}}')
            if [ "$API_STATUS" != "running" ]; then
              echo '‚ùå ERRO: O container da API n√£o iniciou corretamente. Verificando logs...'
              docker-compose logs mobilemed-api
              exit 1
            fi
            
            echo 'üßπ Limpando imagens Docker n√£o utilizadas...'
            docker image prune -f
            
            echo '‚úÖ Deploy conclu√≠do com sucesso!'
            echo 'üåê HealthCore dispon√≠vel em:'
            echo '   - API: http://129.153.86.168:5000/health'
            echo '   - Frontend: http://129.153.86.168:5005'
          "
