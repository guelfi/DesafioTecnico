name: Deploy to OCI VM

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite execu√ß√£o manual

jobs:
  deploy:
    name: Deploy MobileMed to OCI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.OCI_SSH_PRIVATE_KEY }}

      - name: Add OCI VM to known hosts
        run: ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts

      - name: Create project directory on OCI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.OCI_HOST }} "
            sudo mkdir -p /var/www/DesafioTecnico
            sudo chown ubuntu:ubuntu /var/www/DesafioTecnico
          "

      - name: Sync project files to OCI
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='bin' \
            --exclude='obj' \
            --exclude='.env.local*' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ubuntu@${{ secrets.OCI_HOST }}:/var/www/DesafioTecnico/

      - name: Deploy and build on OCI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.OCI_HOST }} << 'EOF'
            set -e

            if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
              echo 'üîß Docker ou Docker Compose n√£o funciona. Realizando instala√ß√£o limpa...'
              # Remove qualquer configura√ß√£o de reposit√≥rio Docker conflitante
              sudo rm -f /etc/apt/sources.list.d/docker.list
              # Instala as depend√™ncias para adicionar um novo reposit√≥rio
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl
              # Adiciona a chave GPG oficial do Docker
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              # Adiciona o reposit√≥rio oficial do Docker
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              # Atualiza a base de dados de pacotes e instala
              sudo apt-get update
              echo 'üì¶ Instalando pacotes essenciais do Docker...'
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker ubuntu
            fi

            cd /var/www/DesafioTecnico
            
            echo 'üöÄ Iniciando deploy do MobileMed...'
            
            echo 'üßπ Parando e removendo containers antigos...'
            sudo docker compose down --remove-orphans || true
            
            echo 'üî® Fazendo build e iniciando containers...'
            sudo docker compose up --build -d
            
            echo '‚è≥ Aguardando containers iniciarem...'
            sleep 20
            
            echo 'üìä Verificando status dos containers...'
            sudo docker compose ps

            API_STATUS=$(sudo docker compose ps -q mobilemed-api | xargs -r docker inspect -f '{{.State.Status}}')
            if [ "$API_STATUS" != "running" ]; then
              echo '‚ùå ERRO: O container da API n√£o iniciou corretamente. Verificando logs...'
              sudo docker compose logs mobilemed-api
              exit 1
            fi
            
            echo 'üßπ Limpando imagens Docker n√£o utilizadas...'
            sudo docker image prune -f
            
            echo '‚úÖ Deploy conclu√≠do com sucesso!'
          EOF