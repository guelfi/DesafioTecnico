name: 🚀 Deploy to Oracle Cloud Infrastructure (OCI)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: container-registry.oracle.com
  API_IMAGE_NAME: mobilemed-api
  FRONTEND_IMAGE_NAME: mobilemed-frontend

jobs:
  build-and-test:
    name: 🔨 Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/Web/package-lock.json
    
    - name: 📦 Restore .NET dependencies
      run: dotnet restore src/Api/MobileMed.Api.csproj
    
    - name: 🔨 Build API
      run: dotnet build src/Api/MobileMed.Api.csproj --no-restore --configuration Release
    
    - name: 🧪 Test API
      run: dotnet test tests/Api.Tests/MobileMed.Api.Tests.csproj --no-build --configuration Release --verbosity normal
    
    - name: 📦 Install Frontend dependencies
      run: npm ci
      working-directory: src/Web
    
    - name: 🔨 Build Frontend
      run: npm run build
      working-directory: src/Web
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:5000' }}
    
    - name: 📤 Upload API artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: src/Api/bin/Release/
    
    - name: 📤 Upload Frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/Web/dist/

  build-docker-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to OCI Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCI_PASSWORD }}
    
    - name: 📝 Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.OCI_TENANCY }}/${{ env.API_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 📝 Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.OCI_TENANCY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🐳 Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Api/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🐳 Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Web/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=${{ secrets.VITE_API_URL }}

  deploy-to-oci:
    name: 🚀 Deploy to OCI
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup OCI CLI
      uses: oracle-actions/configure-oci-cli@v1.0
      with:
        user: ${{ secrets.OCI_USER_OCID }}
        fingerprint: ${{ secrets.OCI_FINGERPRINT }}
        region: ${{ secrets.OCI_REGION }}
        tenancy: ${{ secrets.OCI_TENANCY_OCID }}
        key_content: ${{ secrets.OCI_PRIVATE_KEY }}
    
    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: 🔑 Get OKE kubeconfig
      run: |
        oci ce cluster create-kubeconfig \
          --cluster-id ${{ secrets.OKE_CLUSTER_ID }} \
          --file $HOME/.kube/config \
          --region ${{ secrets.OCI_REGION }} \
          --token-version 2.0.0 \
          --kube-endpoint PUBLIC_ENDPOINT
    
    - name: 📝 Create Kubernetes manifests
      run: |
        mkdir -p k8s
        
        # API Deployment
        cat > k8s/api-deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mobilemed-api
          labels:
            app: mobilemed-api
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: mobilemed-api
          template:
            metadata:
              labels:
                app: mobilemed-api
            spec:
              containers:
              - name: api
                image: ${{ env.REGISTRY }}/${{ secrets.OCI_TENANCY }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
                ports:
                - containerPort: 5000
                env:
                - name: ASPNETCORE_ENVIRONMENT
                  value: "Production"
                - name: ConnectionStrings__DefaultConnection
                  valueFrom:
                    secretKeyRef:
                      name: mobilemed-secrets
                      key: database-connection
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: mobilemed-api-service
        spec:
          selector:
            app: mobilemed-api
          ports:
          - port: 80
            targetPort: 5000
          type: ClusterIP
        EOF
        
        # Frontend Deployment
        cat > k8s/frontend-deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mobilemed-frontend
          labels:
            app: mobilemed-frontend
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: mobilemed-frontend
          template:
            metadata:
              labels:
                app: mobilemed-frontend
            spec:
              containers:
              - name: frontend
                image: ${{ env.REGISTRY }}/${{ secrets.OCI_TENANCY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
                ports:
                - containerPort: 80
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
                livenessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: mobilemed-frontend-service
        spec:
          selector:
            app: mobilemed-frontend
          ports:
          - port: 80
            targetPort: 80
          type: ClusterIP
        EOF
        
        # Ingress
        cat > k8s/ingress.yaml << EOF
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: mobilemed-ingress
          annotations:
            kubernetes.io/ingress.class: "nginx"
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
        spec:
          tls:
          - hosts:
            - ${{ secrets.DOMAIN_NAME }}
            secretName: mobilemed-tls
          rules:
          - host: ${{ secrets.DOMAIN_NAME }}
            http:
              paths:
              - path: /api
                pathType: Prefix
                backend:
                  service:
                    name: mobilemed-api-service
                    port:
                      number: 80
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: mobilemed-frontend-service
                    port:
                      number: 80
        EOF
    
    - name: 🚀 Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        kubectl rollout status deployment/mobilemed-api
        kubectl rollout status deployment/mobilemed-frontend
    
    - name: 📊 Get deployment status
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📊 Deployment Status:"
        kubectl get deployments
        kubectl get services
        kubectl get ingress
        
        echo "🔗 Application URLs:"
        echo "Frontend: https://${{ secrets.DOMAIN_NAME }}"
        echo "API: https://${{ secrets.DOMAIN_NAME }}/api"
        echo "Health Check: https://${{ secrets.DOMAIN_NAME }}/api/health"

  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-to-oci]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: needs.deploy-to-oci.result == 'success'
      run: |
        echo "✅ Deployment to OCI completed successfully!"
        echo "🌐 Application is available at: https://${{ secrets.DOMAIN_NAME }}"
    
    - name: 📢 Notify Failure
      if: needs.deploy-to-oci.result == 'failure'
      run: |
        echo "❌ Deployment to OCI failed!"
        echo "Please check the logs for more details."