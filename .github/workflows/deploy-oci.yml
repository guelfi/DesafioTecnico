name: 🚀 Deploy to Oracle Cloud Infrastructure (OCI)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: container-registry.oracle.com
  API_IMAGE_NAME: mobilemed-api
  FRONTEND_IMAGE_NAME: mobilemed-frontend

jobs:
  build-and-test:
    name: 🔨 Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/Web/package-lock.json
    
    - name: 📦 Restore .NET dependencies
      run: dotnet restore
    
    - name: 🔨 Build API
      run: dotnet build src/Api/MobileMed.Api.csproj --no-restore --configuration Release
    
    - name: 🔨 Build Tests
      run: dotnet build tests/Api.Tests/MobileMed.Api.Tests.csproj --no-restore --configuration Release
    
    - name: 🧪 Test API
      run: dotnet test tests/Api.Tests/MobileMed.Api.Tests.csproj --no-build --configuration Release --verbosity normal
    
    - name: 📦 Install Frontend dependencies
      run: npm ci
      working-directory: src/Web
    
    - name: 🔨 Build Frontend
      run: npm run build
      working-directory: src/Web
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:5000' }}
    
    - name: 📤 Upload API artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: src/Api/bin/Release/
    
    - name: 📤 Upload Frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/Web/dist/

  build-docker-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to OCI Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCI_PASSWORD }}
    
    - name: 📝 Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.OCI_TENANCY }}/${{ env.API_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 📝 Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.OCI_TENANCY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🐳 Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Api/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🐳 Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Web/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=${{ secrets.VITE_API_URL }}

  deploy-to-oci:
    name: 🚀 Deploy to OCI
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.OCI_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts
    
    - name: 🐳 Login to OCI Container Registry on server
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.OCI_HOST }} << 'EOF'
          echo "${{ secrets.OCI_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u "${{ secrets.OCI_USERNAME }}" --password-stdin
        EOF
    
    - name: 📝 Create Docker Compose for MobileMed
      run: |
        cat > docker-compose.mobilemed.yml << EOF
        version: '3.8'
        
        services:
          mobilemed-api:
            image: ${{ env.REGISTRY }}/${{ secrets.OCI_TENANCY }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
            container_name: mobilemed-api
            ports:
              - "5000:5000"
            environment:
              - ASPNETCORE_ENVIRONMENT=Production
              - ASPNETCORE_URLS=http://+:5000
              - ConnectionStrings__DefaultConnection=Data Source=/app/data/mobilemed.db
            volumes:
              - mobilemed_data:/app/data
            restart: unless-stopped
            networks:
              - mobilemed-network
        
          mobilemed-frontend:
            image: ${{ env.REGISTRY }}/${{ secrets.OCI_TENANCY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
            container_name: mobilemed-frontend
            ports:
              - "5005:80"
            environment:
              - REACT_APP_API_URL=http://129.153.86.168:5000
            restart: unless-stopped
            networks:
              - mobilemed-network
            depends_on:
              - mobilemed-api
        
        volumes:
          mobilemed_data:
        
        networks:
          mobilemed-network:
            driver: bridge
        EOF
    
    - name: 🚀 Deploy MobileMed to OCI
      run: |
        # Copy docker-compose file to server
        scp -i ~/.ssh/id_rsa docker-compose.mobilemed.yml ubuntu@${{ secrets.OCI_HOST }}:~/
        
        # Deploy on server
        ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.OCI_HOST }} << 'EOF'
          # Pull latest images
          docker-compose -f docker-compose.mobilemed.yml pull
          
          # Stop existing containers if running
          docker-compose -f docker-compose.mobilemed.yml down || true
          
          # Start new containers
          docker-compose -f docker-compose.mobilemed.yml up -d
          
          # Wait for containers to be ready
          sleep 30
          
          # Check container status
          docker-compose -f docker-compose.mobilemed.yml ps
        EOF
    
    - name: 📊 Get deployment status
      run: |
        echo "🎉 MobileMed deployment completed successfully!"
        echo "📊 Deployment Status:"
        ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.OCI_HOST }} << 'EOF'
          echo "Container Status:"
          docker-compose -f docker-compose.mobilemed.yml ps
          echo ""
          echo "Port Status:"
          netstat -tlnp | grep -E ':(5000|5005)'
        EOF
        
        echo "🔗 Application URLs:"
        echo "Frontend: http://${{ secrets.OCI_HOST }}:5005"
        echo "API: http://${{ secrets.OCI_HOST }}:5000"
        echo "Health Check: http://${{ secrets.OCI_HOST }}:5000/health"

  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-to-oci]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: needs.deploy-to-oci.result == 'success'
      run: |
        echo "✅ MobileMed deployment to OCI completed successfully!"
        echo "🌐 Frontend: http://${{ secrets.OCI_HOST }}:5005"
        echo "🔗 API: http://${{ secrets.OCI_HOST }}:5000"
        echo "📊 Health Check: http://${{ secrets.OCI_HOST }}:5000/health"
        echo "ℹ️  Batuara.net continues running on port 3000"
    
    - name: 📢 Notify Failure
      if: needs.deploy-to-oci.result == 'failure'
      run: |
        echo "❌ MobileMed deployment to OCI failed!"
        echo "Please check the logs for more details."
        echo "ℹ️  Batuara.net should still be running on port 3000"