name: Deploy para Produção - Corrigido

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy no servidor
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          # Configurar modo rigoroso de erro
          set -euo pipefail
          
          echo "🚀 Iniciando deploy do MobileMed..."
          
          # Navegar para o diretório do projeto
          cd /var/www/DesafioTecnico
          
          # Função para limpeza completa de containers
          cleanup_containers() {
            echo "🧹 Limpando containers existentes..."
            
            # Parar serviços do Docker Compose
            docker compose down --remove-orphans --volumes 2>/dev/null || true
            
            # Remover containers específicos se ainda existirem
            docker rm -f mobilemed-api mobilemed-frontend 2>/dev/null || true
            
            # Remover containers órfãos
            docker container prune -f 2>/dev/null || true
            
            # Remover redes não utilizadas
            docker network prune -f 2>/dev/null || true
            
            # Remover imagens dangling
            docker image prune -f 2>/dev/null || true
            
            # Aguardar liberação dos recursos
            sleep 3
            
            echo "✅ Limpeza concluída"
          }
          
          # Função para verificar Docker
          check_docker() {
            echo "🔍 Verificando Docker..."
            if ! docker --version >/dev/null 2>&1; then
              echo "❌ Docker não funciona. Reinstalando..."
              
              # Remover Docker antigo
              sudo apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
              
              # Instalar Docker
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo systemctl start docker
              sudo systemctl enable docker
              
              # Adicionar usuário ao grupo docker se não estiver
              sudo usermod -aG docker $USER || true
              
              rm get-docker.sh
            fi
            echo "✅ Docker funcionando"
          }
          
          # Executar verificações
          check_docker
          cleanup_containers
          
          # Atualizar código
          echo "📥 Atualizando código..."
          git fetch origin
          git reset --hard origin/main 2>/dev/null || git reset --hard origin/master
          
          # Build e deploy
          echo "🔨 Fazendo build dos containers..."
          
          # Build sem cache para garantir atualização
          docker compose build --no-cache --parallel
          
          # Verificar se as imagens foram criadas
          if ! docker images | grep -E "(desafiotecnico[_-]mobilemed|mobilemed)" | head -2; then
            echo "❌ Falha no build das imagens"
            exit 1
          fi
          
          # Iniciar serviços
          echo "🚀 Iniciando serviços..."
          docker compose up -d --remove-orphans
          
          # Aguardar inicialização
          echo "⏳ Aguardando inicialização dos serviços..."
          sleep 15
          
          # Verificar se os containers estão rodando
          if ! docker compose ps --services --filter "status=running" | grep -q .; then
            echo "❌ Containers não iniciaram corretamente"
            echo "📋 Status atual:"
            docker compose ps
            echo "📋 Logs dos serviços:"
            docker compose logs --tail=20
            exit 1
          fi
          
          # Health checks detalhados
          echo "🏥 Verificando saúde dos serviços..."
          
          # Verificar API com retry
          api_healthy=false
          for i in {1..12}; do
            if curl -f -s --max-time 5 http://localhost:5000/health >/dev/null 2>&1; then
              echo "✅ API está saudável"
              api_healthy=true
              break
            fi
            if [ $i -eq 12 ]; then
              echo "❌ API não responde após 12 tentativas"
              echo "📋 Logs da API:"
              docker compose logs --tail=10 mobilemed-api
              exit 1
            fi
            echo "⏳ Aguardando API... (tentativa $i/12)"
            sleep 5
          done
          
          # Verificar Frontend
          frontend_healthy=false
          for i in {1..8}; do
            if curl -f -s --max-time 3 http://localhost:5005 >/dev/null 2>&1; then
              echo "✅ Frontend está acessível"
              frontend_healthy=true
              break
            fi
            if [ $i -eq 8 ]; then
              echo "❌ Frontend não responde após 8 tentativas"
              echo "📋 Logs do Frontend:"
              docker compose logs --tail=10 mobilemed-frontend
              exit 1
            fi
            echo "⏳ Aguardando Frontend... (tentativa $i/8)"
            sleep 3
          done
          
          # Verificação de integridade adicional
          echo "🔍 Verificação de integridade..."
          
          # Verificar se os containers estão saudáveis
          for service in mobilemed-api mobilemed-frontend; do
            health_status=$(docker inspect --format='{{.State.Health.Status}}' $service 2>/dev/null || echo "no-healthcheck")
            if [ "$health_status" = "healthy" ] || [ "$health_status" = "no-healthcheck" ]; then
              echo "✅ $service: $health_status"
            else
              echo "⚠️ $service: $health_status"
            fi
          done
          
          # Deploy bem-sucedido
          echo ""
          echo "🎉 Deploy concluído com sucesso!"
          echo "📊 Status final dos serviços:"
          docker compose ps
          
          echo ""
          echo "🌐 URLs de acesso:"
          PUBLIC_IP=$(curl -s --max-time 3 ifconfig.me 2>/dev/null || echo "SEU_IP_PUBLICO")
          echo "   Frontend: http://$PUBLIC_IP:5005"
          echo "   API: http://$PUBLIC_IP:5000"
          echo "   Health API: http://$PUBLIC_IP:5000/health"
          
          echo ""
          echo "📈 Recursos utilizados:"
          docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
