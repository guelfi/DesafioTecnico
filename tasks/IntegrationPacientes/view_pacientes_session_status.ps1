# Script para visualizar status da sess√£o de integra√ß√£o de Pacientes
# Baseado no modelo de sucesso das integra√ß√µes anteriores

param(
    [string]$JsonFile = "tasks\IntegrationPacientes\integration_pacientes_001.json"
)

# Cores para output
$Host.UI.RawUI.ForegroundColor = "White"

function Write-ColoredText {
    param(
        [string]$Text,
        [string]$Color = "White"
    )
    $originalColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $Color
    Write-Host $Text
    $Host.UI.RawUI.ForegroundColor = $originalColor
}

function Get-StatusColor {
    param([string]$Status)
    switch ($Status) {
        "COMPLETE" { return "Green" }
        "IN_PROGRESS" { return "Yellow" }
        "PENDING" { return "Gray" }
        "ERROR" { return "Red" }
        default { return "White" }
    }
}

function Get-StatusIcon {
    param([string]$Status)
    switch ($Status) {
        "COMPLETE" { return "‚úÖ" }
        "IN_PROGRESS" { return "üîÑ" }
        "PENDING" { return "‚è≥" }
        "ERROR" { return "‚ùå" }
        default { return "üìã" }
    }
}

# Verificar se o arquivo existe
if (-not (Test-Path $JsonFile)) {
    Write-ColoredText "‚ùå Arquivo n√£o encontrado: $JsonFile" "Red"
    exit 1
}

# Carregar dados JSON
try {
    $sessionData = Get-Content $JsonFile -Raw | ConvertFrom-Json
} catch {
    Write-ColoredText "‚ùå Erro ao ler arquivo JSON: $_" "Red"
    exit 1
}

# Header
Write-ColoredText "`nüöÄ STATUS DA INTEGRA√á√ÉO DE PACIENTES" "Cyan"
Write-ColoredText "=" * 60 "Cyan"

# Informa√ß√µes da sess√£o
Write-ColoredText "`nüìã INFORMA√á√ïES DA SESS√ÉO" "Yellow"
Write-ColoredText "ID da Sess√£o: $($sessionData.session_info.session_id)" "White"
Write-ColoredText "Etapa: $($sessionData.session_info.etapa)" "White"
Write-ColoredText "Complexidade: $($sessionData.session_info.complexity)" "White"
Write-ColoredText "Prioridade: $($sessionData.session_info.priority)" "White"
Write-ColoredText "Estimativa: $($sessionData.session_info.estimated_hours)" "White"
Write-ColoredText "√öltima Atualiza√ß√£o: $($sessionData.session_info.last_updated)" "White"

# Resumo do progresso
$progress = $sessionData.progress_summary
Write-ColoredText "`nüìä RESUMO DO PROGRESSO" "Yellow"
Write-ColoredText "Progresso Geral: $($progress.completion_percentage)% ($($progress.completed)/$($progress.total_tasks) tarefas conclu√≠das)" "Cyan"

# Barra de progresso
$barLength = 40
$completedBars = [math]::Floor($progress.completion_percentage * $barLength / 100)
$remainingBars = $barLength - $completedBars
$progressBar = "‚ñà" * $completedBars + "‚ñë" * $remainingBars
Write-ColoredText "[$progressBar] $($progress.completion_percentage)%" "Cyan"

# Estat√≠sticas por status
Write-ColoredText "`nüìà DISTRIBUI√á√ÉO DE TAREFAS" "Yellow"
Write-ColoredText "‚úÖ Conclu√≠das: $($progress.completed)" "Green"
Write-ColoredText "üîÑ Em Progresso: $($progress.in_progress)" "Yellow"
Write-ColoredText "‚è≥ Pendentes: $($progress.pending)" "Gray"

# Lista de tarefas por categoria
Write-ColoredText "`nüìã TAREFAS POR CATEGORIA" "Yellow"

$tasksByCategory = $sessionData.tasks | Group-Object category
foreach ($category in $tasksByCategory) {
    $categoryName = $category.Name
    $taskCount = $category.Count
    $completedInCategory = ($category.Group | Where-Object { $_.status -eq "COMPLETE" }).Count
    
    Write-ColoredText "`nüìÅ $categoryName ($completedInCategory/$taskCount conclu√≠das)" "Magenta"
    
    foreach ($task in $category.Group) {
        $icon = Get-StatusIcon $task.status
        $color = Get-StatusColor $task.status
        $taskInfo = "$icon [$($task.status)] $($task.content)"
        
        if ($task.estimated_time) {
            $taskInfo += " ‚è±Ô∏è $($task.estimated_time)"
        }
        
        Write-ColoredText "  $taskInfo" $color
        
        if ($task.notes -and $task.notes -ne "") {
            Write-ColoredText "    üí° $($task.notes)" "DarkGray"
        }
    }
}

# Pr√≥ximas prioridades
Write-ColoredText "`nüéØ PR√ìXIMAS PRIORIDADES" "Yellow"
foreach ($priority in $sessionData.next_session_priorities) {
    Write-ColoredText "‚Ä¢ $priority" "White"
}

# Checklist de valida√ß√£o
Write-ColoredText "`n‚úÖ CHECKLIST DE VALIDA√á√ÉO" "Yellow"
foreach ($item in $sessionData.validation_checklist) {
    Write-ColoredText "$item" "DarkGray"
}

# Crit√©rios de sucesso
Write-ColoredText "`nüéØ CRIT√âRIOS DE SUCESSO" "Yellow"

Write-ColoredText "`nüîß Funcionais:" "Cyan"
foreach ($criteria in $sessionData.success_criteria.functional) {
    Write-ColoredText "  ‚Ä¢ $criteria" "White"
}

Write-ColoredText "`n‚öôÔ∏è T√©cnicos:" "Cyan"
foreach ($criteria in $sessionData.success_criteria.technical) {
    Write-ColoredText "  ‚Ä¢ $criteria" "White"
}

Write-ColoredText "`nüé® UX:" "Cyan"
foreach ($criteria in $sessionData.success_criteria.ux) {
    Write-ColoredText "  ‚Ä¢ $criteria" "White"
}

# Arquivos a serem modificados
Write-ColoredText "`nüìÅ ARQUIVOS A SEREM MODIFICADOS" "Yellow"
foreach ($file in $sessionData.files_to_modify) {
    Write-ColoredText "‚Ä¢ $file" "DarkCyan"
}

# Status das depend√™ncias
Write-ColoredText "`nüîó STATUS DAS DEPEND√äNCIAS" "Yellow"
foreach ($dep in $sessionData.dependencies.PSObject.Properties) {
    $status = if ($dep.Value -eq $true) { "‚úÖ" } elseif ($dep.Value -eq $false) { "‚ùå" } else { "‚ÑπÔ∏è" }
    Write-ColoredText "$status $($dep.Name): $($dep.Value)" "White"
}

# Comandos √∫teis
Write-ColoredText "`nüõ†Ô∏è COMANDOS √öTEIS" "Yellow"
Write-ColoredText "Atualizar status de tarefa:" "White"
Write-ColoredText "  powershell -ExecutionPolicy Bypass -File tasks\IntegrationPacientes\update_pacientes_task_status.ps1 -TaskId `"task_id`" -Status `"COMPLETE`" -Notes `"Descri√ß√£o`"" "DarkGray"
Write-ColoredText "`nTestar conectividade:" "White"
Write-ColoredText "  scripts\test-connectivity.bat" "DarkGray"
Write-ColoredText "`nIniciar frontend:" "White"
Write-ColoredText "  scripts\front.bat" "DarkGray"

# Footer
Write-ColoredText "`n" "White"
Write-ColoredText "=" * 60 "Cyan"
Write-ColoredText "üöÄ Pronto para come√ßar a integra√ß√£o de Pacientes!" "Green"
Write-ColoredText "üìä Execute as tarefas na ordem e atualize o progresso regularmente." "White"
Write-ColoredText "=" * 60 "Cyan"