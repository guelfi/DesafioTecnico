const http = require('http');

async function testFrontendAuth() {
  console.log('üîç TESTE DE AUTENTICA√á√ÉO DO FRONTEND');
  console.log('=====================================\n');

  // Simular o que o frontend faz
  console.log('1Ô∏è‚É£ Verificando se h√° token salvo...');
  
  // Simular localStorage (normalmente seria checado no navegador)
  console.log('   ‚ùå N√£o h√° como verificar localStorage via Node.js');
  console.log('   ‚ÑπÔ∏è  Voc√™ precisa verificar no navegador: F12 ‚Üí Application ‚Üí Local Storage\n');

  // Fazer login para obter token (como o frontend deveria fazer)
  console.log('2Ô∏è‚É£ Fazendo login para obter token...');
  
  const loginData = JSON.stringify({
    username: 'guelfi',
    password: '@246!588'
  });

  const loginOptions = {
    hostname: '192.168.15.119',
    port: 5000,
    path: '/auth/login',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': loginData.length
    }
  };

  return new Promise((resolve, reject) => {
    const loginReq = http.request(loginOptions, (loginRes) => {
      let loginResponseData = '';
      
      loginRes.on('data', (chunk) => {
        loginResponseData += chunk;
      });
      
      loginRes.on('end', () => {
        if (loginRes.statusCode === 200) {
          const loginResponse = JSON.parse(loginResponseData);
          const token = loginResponse.token;
          console.log('   ‚úÖ Login realizado com sucesso!');
          console.log('   üé´ Token obtido:', token.substring(0, 20) + '...\n');
          
          // Agora testar requisi√ß√£o com token (como o frontend faz)
          console.log('3Ô∏è‚É£ Testando requisi√ß√£o com token...');
          
          const pacientesOptions = {
            hostname: '192.168.15.119',
            port: 5000,
            path: '/pacientes?page=1&pageSize=10',
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          };
          
          const pacientesReq = http.request(pacientesOptions, (pacientesRes) => {
            let pacientesData = '';
            
            pacientesRes.on('data', (chunk) => {
              pacientesData += chunk;
            });
            
            pacientesRes.on('end', () => {
              console.log('   üìä Status:', pacientesRes.statusCode);
              
              if (pacientesRes.statusCode === 200) {
                const response = JSON.parse(pacientesData);
                console.log('   ‚úÖ Pacientes recebidos:', response.length);
                console.log('   üìã Primeiro paciente:', response[0]?.nome || 'N/A');
                
                console.log('\nüéØ DIAGN√ìSTICO:');
                console.log('   ‚úÖ API est√° funcionando');
                console.log('   ‚úÖ Autentica√ß√£o est√° funcionando');
                console.log('   ‚úÖ Dados est√£o sendo retornados');
                console.log('\nüí° PROBLEMA PROV√ÅVEL:');
                console.log('   üîç Frontend n√£o est√° fazendo login OU');
                console.log('   üîç Token n√£o est√° sendo salvo no localStorage OU');
                console.log('   üîç Componente n√£o est√° usando o hook corretamente');
                
                console.log('\nüìù PR√ìXIMOS PASSOS:');
                console.log('   1. Verificar se usu√°rio est√° logado no frontend');
                console.log('   2. Verificar localStorage no navegador (F12)');
                console.log('   3. Fazer login no frontend se necess√°rio');
                
              } else {
                console.log('   ‚ùå Erro:', pacientesData);
              }
              
              resolve();
            });
          });
          
          pacientesReq.on('error', (error) => {
            console.error('   ‚ùå Erro na requisi√ß√£o:', error.message);
            resolve();
          });
          
          pacientesReq.end();
          
        } else {
          console.log('   ‚ùå Erro no login:', loginRes.statusCode);
          console.log('   üìÑ Resposta:', loginResponseData);
          resolve();
        }
      });
    });

    loginReq.on('error', (error) => {
      console.error('‚ùå Erro no login:', error.message);
      resolve();
    });

    loginReq.write(loginData);
    loginReq.end();
  });
}

testFrontendAuth();