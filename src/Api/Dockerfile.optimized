# =============================================================================
# Multi-stage Dockerfile for MobileMed API - Production Optimized
# Security-hardened with non-root user and minimal attack surface
# =============================================================================

# Build stage - Use Alpine for smaller image
FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
WORKDIR /src

# Install required packages for build
RUN apk add --no-cache ca-certificates

# Copy project files for dependency restoration (layer caching optimization)
COPY ["src/Api/MobileMed.Api.csproj", "Api/"]
RUN dotnet restore "Api/MobileMed.Api.csproj" \
    --runtime linux-musl-x64 \
    --no-cache

# Copy source code
COPY src/Api/ Api/
WORKDIR "/src/Api"

# Build and publish the application with optimizations
RUN dotnet publish "MobileMed.Api.csproj" \
    -c Release \
    -o /app/publish \
    --runtime linux-musl-x64 \
    --self-contained false \
    --no-restore \
    /p:PublishReadyToRun=true \
    /p:PublishSingleFile=false \
    /p:PublishTrimmed=false

# Remove unnecessary files to reduce image size
RUN find /app/publish -name "*.pdb" -delete && \
    find /app/publish -name "*.xml" -delete

# =============================================================================
# Runtime stage - Use Alpine for security and smaller size
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final

# Security: Install latest security updates
RUN apk update && apk upgrade && \
    apk add --no-cache \
        ca-certificates \
        tzdata \
        curl \
        wget && \
    rm -rf /var/cache/apk/* && \
    rm -rf /tmp/*

# Security: Create non-root user with specific UID/GID
RUN addgroup --gid 1001 --system appuser && \
    adduser --uid 1001 --system --ingroup appuser --home /app --shell /bin/false appuser

# Set working directory and create necessary directories
WORKDIR /app
RUN mkdir -p /app/database /app/logs /app/temp && \
    chown -R appuser:appuser /app && \
    chmod 755 /app/database /app/logs /app/temp

# Copy application files from build stage with proper ownership
COPY --from=build --chown=appuser:appuser /app/publish .

# Copy database files if they exist (with error handling)
COPY --from=build --chown=appuser:appuser /src/Api/database/ ./database/ 2>/dev/null || true

# Security: Set file permissions (no execute on data files)
RUN find /app -type f -name "*.dll" -exec chmod 644 {} \; && \
    find /app -type f -name "*.exe" -exec chmod 755 {} \; && \
    find /app -type f -name "*.json" -exec chmod 644 {} \; && \
    find /app -type f -name "*.db" -exec chmod 644 {} \; && \
    find /app -type d -exec chmod 755 {} \;

# Security: Switch to non-root user
USER appuser

# Configure environment variables for production
ENV ASPNETCORE_ENVIRONMENT=Production \
    ASPNETCORE_URLS=http://+:5000 \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true \
    DOTNET_USE_POLLING_FILE_WATCHER=true \
    DOTNET_EnableDiagnostics=0 \
    COMPlus_EnableDiagnostics=0 \
    ConnectionStrings__DefaultConnection="Data Source=database/mobilemed.db;Cache=Shared;Foreign Keys=true;" \
    Logging__LogLevel__Default=Warning \
    Logging__LogLevel__Microsoft=Error

# Expose port (only what's necessary)
EXPOSE 5000

# Health check with proper endpoint and timeouts
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --timeout=8 --spider http://localhost:5000/health/live || exit 1

# Security: Use explicit entrypoint (avoid shell form)
ENTRYPOINT ["dotnet", "HealthCore.Api.dll"]

# Metadata labels for better maintenance
LABEL maintainer="HealthCore Team" \
      version="1.0.0" \
      description="HealthCore API - Production optimized container" \
      org.opencontainers.image.source="https://github.com/healthcore/api" \
      org.opencontainers.image.created="2024-01-01" \
      org.opencontainers.image.title="HealthCore API" \
      org.opencontainers.image.description="Secure containerized medical examination management API"
